require "rails_helper"

module Binda
	RSpec.describe FieldSetting, type: :model do


		# this shouldn't be here. FIX needed
		# before(:context) do
		# 	@component = create( :component )
		# 	@radio = create( :radio, fieldable: @component )
		# end

		# this shouldn't be here. FIX needed
		# it "should let you create a radio item with choices" do
		# 	choices = @radio.get_choices
		# 	expect( choices.length ).to eq(3)
		# 	expect( @radio.content ).to eq('f1')
		# 	@radio.update_attribute( 'content', 'f3' )
		# 	expect( @radio.content ).to eq('f3')
		# 	expect( @radio.get_choice ).to eq('f3')
		# end

		before(:example) do
			# Create settings for the radio field
			@radio_setting = create(:radio_setting)
			# Reload in order to update the ActiveRecord object with the 
			# choices created during after_create callback
			@radio_setting.reload
		end

		it "doesn't have any choice by default" do
			expect(@radio_setting.choices.any?).to be_falsey
		end

		it "doesn't have a default choice by default" do
			expect(@radio_setting.default_choice_id).to be_nil
		end

		it "automatically sets the first created choice as the default one" do
			new_choice = @radio_setting.choices.create({ label: 'First chioce', value: 'Lorem ipsum' })
			
			# Reload in order to update the ActiveRecord object with the 
			# choices created during after_create callback
			@radio_setting.reload
			expect(@radio_setting.default_choice_id).to eq(new_choice.id)
		end

		it "selects another choice as default if the original default choice has been deleted" do
			# Create a new choice for the field setting
			new_choice = @radio_setting.choices.create({ label: 'First chioce', value: 'Lorem ipsum' })
			second_new_choice = @radio_setting.choices.create({ label: 'Second chioce', value: 'Lorem ipsum' })
			
			# Reload in order to update the ActiveRecord object with the 
			# choices created during after_create callback
			@radio_setting.reload

			expect(@radio_setting.default_choice_id).to eq(new_choice.id)

			# Destroy the choice
			new_choice.destroy

			# Reload again to get the results of the after_destroy callback
			@radio_setting.reload

			expect(@radio_setting.default_choice_id).to eq(second_new_choice.id)
		end

		it "doesn't have a default choice if all choices have been deleted" do
			# Create a new choice for the field setting
			new_choice = @radio_setting.choices.create({ label: 'First chioce', value: 'Lorem ipsum' })

			# Reload in order to update the ActiveRecord object with the 
			# choices created during after_create callback
			@radio_setting.reload

			expect(@radio_setting.default_choice_id).to eq(new_choice.id)

			new_choice.destroy

			@radio_setting.reload
			expect(@radio_setting.default_choice_id).to be nil
		end

		it "warns you if you delete all choices but it's required to have at least one" do
			pending "to do"
		end

		it "remembers you to solve the issue generated by deleting all choices when it's required to have at least one" do
			pending "to do"
		end

		it "cannot have allow_null set to true if 'field_type' is 'radio'" do
			expect(@radio_setting.update(allow_null: true)).to be false
			expect(@radio_setting.update(allow_null: false)).to be true
		end

	end
end